version: '3.5'

services:
  # nginx:
  #   image: nginx:latest
  #   container_name: 'nginx'
  #   ports:
  #     - ${NGINX_PORT:-8123}:80
  #   volumes:
  #     - ./config/nginx/conf.d:/etc/nginx/conf.d
  #     - ./config/nginx/uwsgi_params:/etc/nginx/uwsgi_params
  #     - ./log/nginx:/var/log/nginx
  #   depends_on:
  #     - app
  #   restart: always
  #   environment:
  #     TZ: Asia/Tokyo

  redis_db:
    image: redis:latest
    container_name: 'redis_db'
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - ./data/redis:/data
    networks:
      - myapp
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']

  mssql:
    image: 'mcr.microsoft.com/mssql/server'
    container_name: 'mssql_db'
    environment:
      SA_PASSWORD: 'il0veYou'
      ACCEPT_EULA: 'Y'

  mysql_db:
    image: mysql:5.6
    container_name: 'mysql_db'
    environment:
      MYSQL_DATABASE: myapp
      MYSQL_ROOT_PASSWORD: il0veYou
      TZ: 'Azia/Tokyo'
    ports:
      - '${MYSQL_PORT:-3306}:3306'
    volumes:
      - ./config/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./data/mysql:/var/lib/mysql
    networks:
      - myapp

  mongo_db:
    image: mongo:latest
    container_name: 'mongo_db'
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: il0veYou
    ports:
      - '${MONGO_PORT:-27017}:27017'
    volumes:
      - ./data/mongo:/data/db
    networks:
      - myapp

  postgres_db:
    image: postgres:9.6
    container_name: 'postgres_db'
    # restart: always
    environment:
      POSTGRES_DB: postgres_db
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: il0veYou
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    networks:
      - myapp

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.5.2
    container_name: 'elasticsearch'
    environment:
      discovery.type: single-node
    networks:
      - myapp

  dockerize:
    image: jwilder/dockerize
    container_name: 'dockerize'

  gofiber:
    build:
      context: ./webapp/gofiber
      dockerfile: Dockerfile
    container_name: 'gofiber'
    environment:
      - GO_ENV=development
    ports:
      - ${GOFIBER_PORT:-3000}:3000
    volumes:
      - ./webapp/gofiber:/app
    stdin_open: true
    command: 'go run main.go'
    depends_on:
      - '${MONGO_DB:-mongo_db}'
    networks:
      - myapp

  angular:
    build:
      context: ./webapp/angular
      dockerfile: Dockerfile
    container_name: 'angular'
    environment:
      - NODE_ENV=development
    ports:
      - ${ANGULAR_PORT:-4200}:4200
    volumes:
      - ./webapp/angular:/app
      - '/app/node_modules'
    stdin_open: true
    command: 'yarn start'

  reactjs:
    build:
      context: ./webapp/reactjs
      dockerfile: Dockerfile
    container_name: 'reactjs'
    environment:
      - NODE_ENV=development
    ports:
      - ${REACTJS_PORT:-5000}:3000
    volumes:
      - ./webapp/reactjs:/app
      - '/app/node_modules'
    stdin_open: true
    command: 'yarn start'

  nextjs:
    build:
      context: ./webapp/nextjs
      dockerfile: Dockerfile
    container_name: 'nextjs'
    environment:
      - NODE_ENV=development
    ports:
      - ${NEXTJS_PORT:-3000}:3000
    volumes:
      - ./webapp/nextjs:/app
      - '/app/node_modules'
    stdin_open: true
    command: 'yarn dev'

  nuxtjs:
    build:
      context: ./webapp/nuxtjs
      dockerfile: Dockerfile
    container_name: 'nuxtjs'
    environment:
      - NODE_ENV=development
    ports:
      - ${NUXTJS_PORT:-7000}:3000
    volumes:
      - ./webapp/nuxtjs:/app
      - '/app/node_modules'
    stdin_open: true
    command: 'yarn dev'

  expressjs:
    build:
      context: ./webapp/expressjs
      dockerfile: Dockerfile
    container_name: 'expressjs'
    environment:
      - NODE_ENV=development
    ports:
      - ${EXPRESSJS_PORT:-8080}:3000
    volumes:
      - ./webapp/expressjs:/app
      - '/app/node_modules'
    stdin_open: true
    command: 'yarn dev'

  nodejs:
    build:
      context: ./webapp/nodejs
      dockerfile: Dockerfile
    container_name: 'nodejs'
    environment:
      - NODE_ENV=development
    ports:
      - ${NODEJS_PORT:-8080}:8080
    volumes:
      - ./webapp/nodejs:/app
      - '/app/node_modules'
    stdin_open: true
    command: 'yarn start'

  django:
    build:
      context: ./webapp/django
      dockerfile: Dockerfile
    container_name: 'django'
    environment:
      - DEBUG=true
    ports:
      - ${DJANGO_PORT:-8000}:8000
    volumes:
      - ./webapp/django:/app
    stdin_open: true
    command: 'python manage.py runserver 0.0.0.0:8000'

  fastapi:
    build:
      context: ./webapp/fastapi
      dockerfile: Dockerfile
    container_name: 'fastapi'
    environment:
      - DEBUG=true
    ports:
      - ${FASTAPI_PORT:-8000}:8000
    volumes:
      - ./webapp/fastapi:/app
    command: 'uvicorn main:app --host 0.0.0.0'

  flask:
    build:
      context: ./webapp/flask
      dockerfile: Dockerfile
    container_name: 'flask'
    environment:
      - FLASK_ENV=development
    ports:
      - ${FLASK_PORT:-5000}:5000
    volumes:
      - ./webapp/flask:/app
    command: 'python -m app'

  slim:
    build:
      context: ./webapp/slim
      dockerfile: Dockerfile
    container_name: 'slim'
    environment:
      docker: 'true'
    ports:
      - ${FLASK_PORT:-8081}:8081
    volumes:
      - ./webapp/slim:/app
      - ./logs:/var/www/logs

  lumen:
    build:
      context: ./webapp/lumen
      dockerfile: Dockerfile
    container_name: 'lumen'
    environment:
      docker: 'true'
    ports:
      - ${FLASK_PORT:-8082}:8082
    volumes:
      - ./webapp/lumen:/app
      - ./logs:/var/www/logs
    networks:
      - myapp
    depends_on:
      - '${REDIS_DB:-redis_db}'
      - '${MYSQL_DB:-mysql_db}'

  laravel:
    build:
      context: ./webapp/laravel
      dockerfile: Dockerfile
    container_name: 'laravel'
    environment:
      docker: 'true'
    ports:
      - ${LARAVEL_PORT:-8083}:8083
    volumes:
      - ./webapp/laravel:/app
      - ./logs:/var/www/logs
    networks:
      - myapp
    depends_on:
      - '${REDIS_DB:-redis_db}'
      - '${MYSQL_DB:-mysql_db}'

  golang:
    build:
      context: ./webapp/golang
      dockerfile: Dockerfile
    container_name: 'golang'
    environment:
      docker: 'true'
    ports:
      - ${GOLANG_PORT:-8084}:8080
    volumes:
      - ./webapp/golang:/app

networks:
  myapp:
    driver: bridge
